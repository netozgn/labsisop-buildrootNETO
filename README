Buildroot is a simple, efficient and easy-to-use tool to generate embedded
Linux systems through cross-compilation.

The documentation can be found in docs/manual. You can generate a text
document with 'make manual-text' and read output/docs/manual/manual.text.
Online documentation can be found at http://buildroot.org/docs.html

To build and use the buildroot stuff, do the following:

1) run 'make menuconfig'
2) select the target architecture and the packages you wish to compile
3) run 'make'
4) wait while it compiles
5) find the kernel, bootloader, root filesystem, etc. in output/images

You do not need to be root to build or run buildroot.  Have fun!

Buildroot comes with a basic configuration for a number of boards. Run
'make list-defconfigs' to view the list of provided configurations.

Please feed suggestions, bug reports, insults, and bribes back to the
buildroot mailing list: buildroot@buildroot.org
You can also find us on #buildroot on OFTC IRC.

If you would like to contribute patches, please read
https://buildroot.org/manual.html#submitting-patches


TUTORIAL T1
Para configurar o modulo kernel com as politicas sstf:

$ cd modules/
$ cd sstf-ioschd/
$ make clean
$ make

volta para a root 'cd ..'
$ export LINUX_OVERRIDE_SRCDIR=~/workspaces/labsisop-buildroot/linux-4.13.9/
$ make

Rodar o modulo escalonador:
1. inicializar a maquina virtual
$ ./start_qemu.sh

2. carrega o módulo do escalonador SSTF.
# modprobe sstf-iosched

3. exibe o escalonador de I/O ativo
# cat /sys/block/sdb/queue/scheduler

4. mudar o escalonador de I/O pro sstf
# echo sstf > /sys/block/sdb/queue/scheduler

5. exibe novamente o escalonador de I/O ativo, e agora deve aparecer o sstf selecionado
# cat /sys/block/sdb/queue/scheduler

6. Para limpar logs
# dmesg -c

Testar o escalonador:
# sector_read

7. Gerar logs
# dmesg | grep "[SSTF]" > results.log

8. Sincronizar 
# sync

9. Desligar a target
# poweroff

Na root para recuperar os logs
1. Depois de gerar o arquivo, basta copiar para a máquina host
# sudo mkdir -p /mnt/guest-rootfs
# sudo mount -o loop output/images/rootfs.ext2 /mnt/guest-rootfs
# sudo cp /mnt/guest-rootfs/root/results.log /workspaces/labsisop-buildroot/results.log
# sudo umount /mnt/guest-rootfs

Desafio 2.2
Para Compilação
Alterar post-build -> $COMPILER -o $BUILDROOT_DIR/output/target/bin/syscall_desafio1_processSleep $BUILDROOT_DIR/custom-scripts/syscall_desafio1_processSleep.c
Alterar  syscalls.h -> asmlinkage long sys_listSleepProcesses(char __user *buf, size_t size);
Alterar syscall_32.tbl -> 386 i386	listSleepProcesses    listSleepProcesses

Para Execução
$ export LINUX_OVERRIDE_SRCDIR=$(pwd)/linux-4.13.9
$ make (no buildroot)
$ ./start_qemu.sh
$ ps (ver um pid e adicionar no prox comando)
$ syscall_desafio1_processSleep pid

Desafio 2.3

$ cd modules/
$ cd simple_driver_desafio_2.3/
$ make clean
$ make

volta para a root 'cd ..'
$ export LINUX_OVERRIDE_SRCDIR=~/workspaces/labsisop-buildroot/linux-4.13.9/
$ make

Rodar o modulo escalonador:
1. inicializar a maquina virtual
$ ./start_qemu.sh

Carrega modulo
# modprobe simple_driver_desafio key0="f0e1d2c3" key1="b4a59687" key2="78695a4b" key3="3c2d1e0f"

Rodar os testes
# test_simple_driver_desafio

Exemplo de output correto:
random: crng init done
Starting XTEA device test...
XTEA Driver opened
Enviando comando: enc aabbccddeeff00112233445566778899
XTEA Driver: processed 16 bytes
Resultado recebido: [e74ca02e5b1885d93d2cd3edb82c2177]
XTEA Driver closed